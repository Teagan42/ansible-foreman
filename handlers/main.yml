---
- name: restart foreman-proxy
  set_fact:
    foreman_proxy_require_restart: True
  listen: "restart_netboot_services"
 #notify: foreman_proxy_start_trigger

- name: restart foreman
  set_fact:
    foreman_require_restart: True
  listen: "restart_netboot_services"
  #notify: foreman_start_trigger

- name: reload nginx config
  service:
    name: nginx
    state: reloaded

- name: capture_foreman_version
  command: foreman version
  register: foreman_version_results
  notify: set_foreman_version

- name: set_foreman_version
  set_fact:
    foreman_version: "{{ foreman_version_results.stdout }}"
  notify: display_foreman_version

- name: display_foreman_version
  debug:
    msg: "Foreman Installed Version is: {{ foreman_version }}"

- name: set foreman admin password
  command: "foreman-rake permissions:reset username={{ foreman_admin_user }} password={{ foreman_admin_password }}"
  when: foreman_pw_updated is changed or foreman_perform_rake_tasks
  no_log: True

- name: rebuild pxe default configs
  command: hammer template build-pxe-default
  notify: restart foreman-proxy

- name: restart apt-cacher-ng
  service:
    name: apt-cacher-ng
    state: restarted



- name: foreman_start_trigger
  listen: restart foreman
  block:
    - name: Restart the foreman service
      systemd:
        name: foreman
        state: restarted
        enabled: yes
      register: foreman_started
      when:
        - foreman_enable_service
        - foreman_require_restart | default(false)
      notify:
        - reload nginx config
    - name: Verify foreman HTTP service is listening
      wait_for:
        host: "{{ foreman_interface | default(\"localhost\", true) }}"
        port: "{{ foreman_port | default('3000') }}"
        delay: 5
      when:
        - foreman_enable_service
      ignore_errors: yes
      register: foreman_start_attempt
    - name: assert running
      assert:
        that:
          - "not foreman_start_attempt.failed"
      when:
        - foreman_enable_service
  rescue:
    - name: Get foreman journald logs if service does not appear to be up
      shell: journalctl _SYSTEMD_INVOCATION_ID=`systemctl show -p InvocationID --value foreman.service`
      register: foreman_journal
      when: foreman_start_attempt.failed

    - fail:
        msg: "{{ foreman_journal.stdout_lines }}"
      when: foreman_start_attempt.failed


- name: foreman_proxy_start_trigger
  listen: restart foreman-proxy
  block:
    - name: Restart the foreman-proxy service
      systemd:
        name: foreman-proxy
        state: restarted
        enabled: yes
      register: foreman_proxy_started
      when:
        - foreman_proxy_enable_service
        - foreman_proxy_require_restart | default(false)
    - name: Verify foreman-proxy service is listening
      wait_for:
        host: "{{ foreman_proxy_bind_host | default(ansible_default_ipv4.address) }}"
        port: "{{ foreman_proxy_port }}"
        delay: 5
      when:
        - foreman_proxy_enable_service
      ignore_errors: yes
      register: foreman_proxy_start_attempt
    - name: assert running
      assert:
        that:
          - "not foreman_proxy_start_attempt.failed"
      when:
        - foreman_enable_service
  rescue:
    - name: Get foreman-proxy journald logs if service does not appear to be up
      shell: journalctl _SYSTEMD_INVOCATION_ID=`systemctl show -p InvocationID --value foreman-proxy.service`
      register: foreman_proxy_journal
      when: foreman_proxy_start_attempt.failed
    - fail:
        msg: "{{ foreman_proxy_journal.stdout_lines }}"
      when: foreman_proxy_start_attempt.failed


#- name: foreman_restart_trigger
#  block:
#    - name: Restart the foreman service
#      systemd:
#        name: foreman
#        state: restarted
#        enabled: yes
#      register: foreman_started
#      when:
#        - foreman_enable_service
#        - foreman_require_restart | default(false)
#      notify:
#        - reload nginx config
#
#    - name: Verify foreman HTTP service is listening
#      wait_for:
#        host: "{{ foreman_interface | default(\"localhost\", true) }}"
#        port: "{{ foreman_port | default('3000') }}"
#        delay: 5
#      when: foreman_started.changed and foreman_enable_service
#      ignore_errors: yes
#      register: foreman_start_attempt
#
#    - name: Get foreman journald logs if service does not appear to be up
#      shell: journalctl _SYSTEMD_INVOCATION_ID=`systemctl show -p InvocationID --value foreman.service`
#      register: foreman_journal
#      when: foreman_start_attempt.failed is defined and foreman_start_attempt.failed == True
#
#    - fail:
#        msg: "{{ foreman_journal.stdout_lines }}"
#      when: foreman_start_attempt.failed is defined and foreman_start_attempt.failed == True
#
#- name: foreman_proxy_restart_trigger
#  block:
#    - name: Restart the foreman-proxy service
#      systemd:
#        name: foreman-proxy
#        state: restarted
#        enabled: yes
#      register: foreman_proxy_started
#      when:
#        - foreman_proxy_enable_service
#        - foreman_proxy_require_restart | default(false)
#    - name: Verify foreman-proxy service is listening
#      wait_for:
#        host: "{{ foreman_proxy_bind_host | default(ansible_default_ipv4.address) }}"
#        port: "{{ foreman_proxy_port }}"
#        delay: 5
#      when: foreman_proxy_started.changed and foreman_proxy_enable_service
#      ignore_errors: yes
#      register: foreman_proxy_start_attempt
#    - name: Get foreman-proxy journald logs if service does not appear to be up
#      shell: journalctl _SYSTEMD_INVOCATION_ID=`systemctl show -p InvocationID --value foreman-proxy.service`
#      register: foreman_proxy_journal
#      when: foreman_proxy_start_attempt.failed is defined and foreman_proxy_start_attempt.failed == True
#    - fail:
#        msg: "{{ foreman_proxy_journal.stdout_lines }}"
#      when: foreman_proxy_start_attempt.failed is defined and foreman_proxy_start_attempt.failed == True
